"use strict";(self.webpackChunkAqLib_documentation_website=self.webpackChunkAqLib_documentation_website||[]).push([[9379],{26582:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"apex/core/Aq","title":"Aq","description":"SUPPRESSWARNINGS","source":"@site/../documentation/apex/core/Aq.md","sourceDirName":"apex/core","slug":"/apex/core/Aq","permalink":"/AqLib-Website/apex/core/Aq","draft":false,"unlisted":false,"editUrl":"https://bitbucket.org/aquiva/aqlib/src/main/documentation/../documentation/apex/core/Aq.md","tags":[],"version":"current","lastUpdatedBy":"eorekhov","lastUpdatedAt":1722333055000,"frontMatter":{"layout":"default","autogenerated":true},"sidebar":"documentation","previous":{"title":"Apex Core","permalink":"/AqLib-Website/apex/core/"},"next":{"title":"AqAggregation","permalink":"/AqLib-Website/apex/core/AqAggregation"}}');var s=i(74848),l=i(28453);const n={layout:"default",autogenerated:!0},o="Aq",r={},d=[{value:"Fields",id:"fields",level:2},{value:"<code>public OPERATOR_SYMBOL_MAP</code> \u2192 <code>Map&lt;Operator,String&gt;</code>",id:"public-operator_symbol_map--mapoperatorstring",level:3},{value:"<code>public LOGICAL_SYMBOL_MAP</code> \u2192 <code>Map&lt;Logical,String&gt;</code>",id:"public-logical_symbol_map--maplogicalstring",level:3},{value:"<code>public SORT_DIR_SYMBOL_MAP</code> \u2192 <code>Map&lt;SortDir,String&gt;</code>",id:"public-sort_dir_symbol_map--mapsortdirstring",level:3},{value:"<code>public NULLS_FIRST</code> \u2192 <code>String</code>",id:"public-nulls_first--string",level:3},{value:"<code>public NULLS_LAST</code> \u2192 <code>String</code>",id:"public-nulls_last--string",level:3},{value:"<code>public NULL_ORDER_SYMBOL_MAP</code> \u2192 <code>Map&lt;NullOrder,String&gt;</code>",id:"public-null_order_symbol_map--mapnullorderstring",level:3},{value:"Methods",id:"methods",level:2},{value:"Validation",id:"validation",level:3},{value:"<code>public static void validate(Validatable objectToValidate)</code>",id:"public-static-void-validatevalidatable-objecttovalidate",level:5},{value:"<code>public static void validate(Validatable objectToValidate, String resultType)</code>",id:"public-static-void-validatevalidatable-objecttovalidate-string-resulttype",level:5},{value:"<code>public static void requireValue(String valueName, Object value)</code>",id:"public-static-void-requirevaluestring-valuename-object-value",level:5},{value:"<code>public static void requireValueInSet(String valueName, String value, Set&lt;String&gt; validValues, Boolean required)</code>",id:"public-static-void-requirevalueinsetstring-valuename-string-value-setstring-validvalues-boolean-required",level:5},{value:"<code>public static void requireValueInSet(String valueName, String value, Set&lt;String&gt; validValues)</code>",id:"public-static-void-requirevalueinsetstring-valuename-string-value-setstring-validvalues",level:5},{value:"<code>public static void requireNonemptyList(String valueName, List&lt;Object&gt; value)</code>",id:"public-static-void-requirenonemptyliststring-valuename-listobject-value",level:5},{value:"<code>public static Boolean isEmptyList(List&lt;Object&gt; val)</code>",id:"public-static-boolean-isemptylistlistobject-val",level:5},{value:"SObject methods",id:"sobject-methods",level:3},{value:"<code>public static Boolean exists(List&lt;SObject&gt; sObjectList)</code>",id:"public-static-boolean-existslistsobject-sobjectlist",level:5},{value:"<code>public static List&lt;SObject&gt; atLeastOne(SObjectType objectType, List&lt;SObject&gt; sObjectList)</code>",id:"public-static-listsobject-atleastonesobjecttype-objecttype-listsobject-sobjectlist",level:5},{value:"<code>public static SObject exactlyOne(SObjectType objectType, List&lt;SObject&gt; sObjectList)</code>",id:"public-static-sobject-exactlyonesobjecttype-objecttype-listsobject-sobjectlist",level:5},{value:"<code>public static SObject atMostOne(SObjectType objectType, List&lt;SObject&gt; sObjectList)</code>",id:"public-static-sobject-atmostonesobjecttype-objecttype-listsobject-sobjectlist",level:5},{value:"<code>public static List&lt;SObject&gt; filterByRecordType(List&lt;SObject&gt; records, Id recordTypeId)</code>",id:"public-static-listsobject-filterbyrecordtypelistsobject-records-id-recordtypeid",level:5},{value:"<code>public static Set&lt;Id&gt; getIdSet(List&lt;SObject&gt; records, SObjectField idField)</code>",id:"public-static-setid-getidsetlistsobject-records-sobjectfield-idfield",level:5},{value:"<code>public static Set&lt;String&gt; getFieldValuesFromRecords(List&lt;SObject&gt; records, SObjectField fieldName)</code>",id:"public-static-setstring-getfieldvaluesfromrecordslistsobject-records-sobjectfield-fieldname",level:5},{value:"<code>public static String getStringFromResource(String resourceName)</code>",id:"public-static-string-getstringfromresourcestring-resourcename",level:5},{value:"<code>public static Object getObjectFromResource(String resourceName, Type resourceType)</code>",id:"public-static-object-getobjectfromresourcestring-resourcename-type-resourcetype",level:5},{value:"<code>public static List&lt;Object&gt; getObjectList(Set&lt;SObjectField&gt; objectSet)</code>",id:"public-static-listobject-getobjectlistsetsobjectfield-objectset",level:5},{value:"Record Type methods",id:"record-type-methods",level:3},{value:"<code>public static Map&lt;String,RecordType&gt; getAllRecordTypes()</code>",id:"public-static-mapstringrecordtype-getallrecordtypes",level:5},{value:"<code>public static RecordType getRecordTypeByName(SObjectType objectType, String developerName)</code>",id:"public-static-recordtype-getrecordtypebynamesobjecttype-objecttype-string-developername",level:5},{value:"<code>public static Id getRecordTypeId(SObjectType objectType, String developerName)</code>",id:"public-static-id-getrecordtypeidsobjecttype-objecttype-string-developername",level:5},{value:"<code>public static String getRecordTypeLabel(SObjectType objectType, String developerName)</code>",id:"public-static-string-getrecordtypelabelsobjecttype-objecttype-string-developername",level:5},{value:"<code>public static RecordTypeInfo getRecordTypeInfoByName(String objectTypeName, String developerName)</code>",id:"public-static-recordtypeinfo-getrecordtypeinfobynamestring-objecttypename-string-developername",level:5},{value:"<code>public static Boolean hasRecordType(SObject record, Set&lt;String&gt; developerNames)</code>",id:"public-static-boolean-hasrecordtypesobject-record-setstring-developernames",level:5},{value:"<code>public static Boolean isRecordType(SObject record, String developerName)</code>",id:"public-static-boolean-isrecordtypesobject-record-string-developername",level:5},{value:"Namespace prefix handling",id:"namespace-prefix-handling",level:3},{value:"<code>public static String appendPrefix(String valueToPrefix)</code>",id:"public-static-string-appendprefixstring-valuetoprefix",level:5},{value:"Null-safe operations",id:"null-safe-operations",level:3},{value:"<code>public static String ifNull(Object value)</code>",id:"public-static-string-ifnullobject-value",level:5},{value:"<code>public static String ifNull(String value, String defaultValue)</code>",id:"public-static-string-ifnullstring-value-string-defaultvalue",level:5},{value:"<code>public static String ifNull(Object value, String defaultValue)</code>",id:"public-static-string-ifnullobject-value-string-defaultvalue",level:5},{value:"<code>public static Integer ifNull(Integer value, Integer defaultValue)</code>",id:"public-static-integer-ifnullinteger-value-integer-defaultvalue",level:5},{value:"<code>public static Integer ifNull(Decimal value, Integer defaultValue)</code>",id:"public-static-integer-ifnulldecimal-value-integer-defaultvalue",level:5},{value:"<code>public static Decimal ifNull(Decimal value, Decimal defaultValue)</code>",id:"public-static-decimal-ifnulldecimal-value-decimal-defaultvalue",level:5},{value:"<code>public static Date ifNull(Date value, Date defaultValue)</code>",id:"public-static-date-ifnulldate-value-date-defaultvalue",level:5},{value:"Misc",id:"misc",level:3},{value:"<code>public static Map&lt;String,Set&lt;String&gt;&gt; getSObjectFieldNames(List&lt;SObject&gt; records)</code>",id:"public-static-mapstringsetstring-getsobjectfieldnameslistsobject-records",level:5},{value:"<code>public static void splitStringIntoSObjectFields(SObject sobj, List&lt;Schema.SObjectField&gt; fields, String value)</code>",id:"public-static-void-splitstringintosobjectfieldssobject-sobj-listschemasobjectfield-fields-string-value",level:5},{value:"<code>public static void abbreviateExcessiveTextFields(SObject entity)</code>",id:"public-static-void-abbreviateexcessivetextfieldssobject-entity",level:5},{value:"<code>public static Map&lt;Id,List&lt;SObject&gt;&gt; toMapByParentId(List&lt;SObject&gt; records, SObjectField parentField)</code>",id:"public-static-mapidlistsobject-tomapbyparentidlistsobject-records-sobjectfield-parentfield",level:5},{value:"<code>public static Map&lt;Id,List&lt;SObject&gt;&gt; toMapByParentId(List&lt;SObject&gt; records, SObjectField parentField, Set&lt;Id&gt; parentKeys)</code>",id:"public-static-mapidlistsobject-tomapbyparentidlistsobject-records-sobjectfield-parentfield-setid-parentkeys",level:5},{value:"<code>public static Map&lt;String,List&lt;SObject&gt;&gt; toMapByCompoundId(List&lt;SObject&gt; records, List&lt;SObjectField&gt; parentFields)</code>",id:"public-static-mapstringlistsobject-tomapbycompoundidlistsobject-records-listsobjectfield-parentfields",level:5},{value:"<code>public static Map&lt;Id,Map&lt;Id,List&lt;SObject&gt;&gt;&gt; toMapByParentIdByParentId(List&lt;SObject&gt; records, SObjectField outerParentId, SObjectField innerParentId)</code>",id:"public-static-mapidmapidlistsobject-tomapbyparentidbyparentidlistsobject-records-sobjectfield-outerparentid-sobjectfield-innerparentid",level:5},{value:"<code>public static String getConcatenatedValue(SObject record, List&lt;SObjectField&gt; fields)</code>",id:"public-static-string-getconcatenatedvaluesobject-record-listsobjectfield-fields",level:5},{value:"<code>public static String concatObjectStringFields(SObject sobj, List&lt;Schema.SObjectField&gt; fields)</code>",id:"public-static-string-concatobjectstringfieldssobject-sobj-listschemasobjectfield-fields",level:5},{value:"Enums",id:"enums",level:2},{value:"Operator",id:"operator",level:3},{value:"Logical",id:"logical",level:3},{value:"SortDir",id:"sortdir",level:3},{value:"NullOrder",id:"nullorder",level:3},{value:"Classes",id:"classes",level:2},{value:"BusinessException",id:"businessexception",level:3},{value:"Constructors",id:"constructors",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions",level:5},{value:"####### <code>public BusinessException(AqResult result)</code>\n####### <code>public BusinessException(String message, String scopeType, String scope, String code)</code>\n####### <code>public BusinessException(String message, String scopeType, String scope)</code>",id:"-public-businessexceptionaqresult-result-public-businessexceptionstring-message-string-scopetype-string-scope-string-code-public-businessexceptionstring-message-string-scopetype-string-scope",level:2},{value:"ValidationException",id:"validationexception",level:3},{value:"Constructors",id:"constructors-1",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-1",level:5},{value:"####### <code>public ValidationException(AqResult result)</code>\n####### <code>public ValidationException(String message, String scopeType, String scope, String code)</code>\n####### <code>public ValidationException(String message, String scopeType, String scope)</code>",id:"-public-validationexceptionaqresult-result-public-validationexceptionstring-message-string-scopetype-string-scope-string-code-public-validationexceptionstring-message-string-scopetype-string-scope",level:2},{value:"UserException",id:"userexception",level:3},{value:"Constructors",id:"constructors-2",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-2",level:5},{value:"####### <code>public UserException(AqResult result)</code>\n####### <code>public UserException(String message, String scopeType, String scope, String code)</code>\n####### <code>public UserException(String message, String scopeType, String scope)</code>",id:"-public-userexceptionaqresult-result-public-userexceptionstring-message-string-scopetype-string-scope-string-code-public-userexceptionstring-message-string-scopetype-string-scope",level:2},{value:"NotFoundException",id:"notfoundexception",level:3},{value:"Constructors",id:"constructors-3",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-3",level:5},{value:"####### <code>public NotFoundException(AqResult result)</code>\n####### <code>public NotFoundException(String message, String scopeType, String scope, String code)</code>\n####### <code>public NotFoundException(String message, String scopeType, String scope)</code>",id:"-public-notfoundexceptionaqresult-result-public-notfoundexceptionstring-message-string-scopetype-string-scope-string-code-public-notfoundexceptionstring-message-string-scopetype-string-scope",level:2},{value:"RecordCountException",id:"recordcountexception",level:3},{value:"Constructors",id:"constructors-4",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-4",level:5},{value:"####### <code>public RecordCountException(AqResult result)</code>\n####### <code>public RecordCountException(String message, String scopeType, String scope, String code)</code>\n####### <code>public RecordCountException(String message, String scopeType, String scope)</code>",id:"-public-recordcountexceptionaqresult-result-public-recordcountexceptionstring-message-string-scopetype-string-scope-string-code-public-recordcountexceptionstring-message-string-scopetype-string-scope",level:2},{value:"PermissionException",id:"permissionexception",level:3},{value:"Constructors",id:"constructors-5",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-5",level:5},{value:"####### <code>public PermissionException(AqResult result)</code>\n####### <code>public PermissionException(String message, String scopeType, String scope, String code)</code>\n####### <code>public PermissionException(String message, String scopeType, String scope)</code>",id:"-public-permissionexceptionaqresult-result-public-permissionexceptionstring-message-string-scopetype-string-scope-string-code-public-permissionexceptionstring-message-string-scopetype-string-scope",level:2},{value:"QueryPermissionException",id:"querypermissionexception",level:3},{value:"Constructors",id:"constructors-6",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-6",level:5},{value:"####### <code>public QueryPermissionException(AqResult result)</code>\n####### <code>public QueryPermissionException(String message, String scopeType, String scope, String code)</code>\n####### <code>public QueryPermissionException(String message, String scopeType, String scope)</code>\n####### <code>public QueryPermissionException(QueryException originException)</code>",id:"-public-querypermissionexceptionaqresult-result-public-querypermissionexceptionstring-message-string-scopetype-string-scope-string-code-public-querypermissionexceptionstring-message-string-scopetype-string-scope-public-querypermissionexceptionqueryexception-originexception",level:2},{value:"DuplicateException",id:"duplicateexception",level:3},{value:"Constructors",id:"constructors-7",level:4},{value:"Additional custom exceptions",id:"additional-custom-exceptions-7",level:5},{value:"####### <code>public DuplicateException(AqResult result)</code>\n####### <code>public DuplicateException(String message, String scopeType, String scope, String code)</code>\n####### <code>public DuplicateException(String message, String scopeType, String scope)</code>",id:"-public-duplicateexceptionaqresult-result-public-duplicateexceptionstring-message-string-scopetype-string-scope-string-code-public-duplicateexceptionstring-message-string-scopetype-string-scope",level:2},{value:"Value",id:"value",level:3},{value:"Methods",id:"methods-1",level:4},{value:"<code>public Boolean equals(Object obj)</code>",id:"public-boolean-equalsobject-obj",level:5},{value:"<code>public Integer hashCode()</code>",id:"public-integer-hashcode",level:5},{value:"Interfaces",id:"interfaces",level:2},{value:"Formatable",id:"formatable",level:3},{value:"Methods",id:"methods-2",level:4},{value:"<code>public String toString()</code>",id:"public-string-tostring",level:5},{value:"Validatable",id:"validatable",level:3},{value:"Methods",id:"methods-3",level:4},{value:"<code>public AqResult validate()</code>",id:"public-aqresult-validate",level:5}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",p:"p",strong:"strong",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:["[ This file is autogenerated from apexdoc ]","\n",(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"aq",children:"Aq"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"SUPPRESSWARNINGS"})}),"\n",(0,s.jsx)(t.p,{children:"Core shared methods, classes, and interfaces."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Group"})," apex/core"]}),"\n",(0,s.jsx)(t.h2,{id:"fields",children:"Fields"}),"\n",(0,s.jsxs)(t.h3,{id:"public-operator_symbol_map--mapoperatorstring",children:[(0,s.jsx)(t.code,{children:"public OPERATOR_SYMBOL_MAP"})," \u2192 ",(0,s.jsx)(t.code,{children:"Map<Operator,String>"})]}),"\n",(0,s.jsxs)(t.h3,{id:"public-logical_symbol_map--maplogicalstring",children:[(0,s.jsx)(t.code,{children:"public LOGICAL_SYMBOL_MAP"})," \u2192 ",(0,s.jsx)(t.code,{children:"Map<Logical,String>"})]}),"\n",(0,s.jsxs)(t.h3,{id:"public-sort_dir_symbol_map--mapsortdirstring",children:[(0,s.jsx)(t.code,{children:"public SORT_DIR_SYMBOL_MAP"})," \u2192 ",(0,s.jsx)(t.code,{children:"Map<SortDir,String>"})]}),"\n",(0,s.jsxs)(t.h3,{id:"public-nulls_first--string",children:[(0,s.jsx)(t.code,{children:"public NULLS_FIRST"})," \u2192 ",(0,s.jsx)(t.code,{children:"String"})]}),"\n",(0,s.jsxs)(t.h3,{id:"public-nulls_last--string",children:[(0,s.jsx)(t.code,{children:"public NULLS_LAST"})," \u2192 ",(0,s.jsx)(t.code,{children:"String"})]}),"\n",(0,s.jsxs)(t.h3,{id:"public-null_order_symbol_map--mapnullorderstring",children:[(0,s.jsx)(t.code,{children:"public NULL_ORDER_SYMBOL_MAP"})," \u2192 ",(0,s.jsx)(t.code,{children:"Map<NullOrder,String>"})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"validation",children:"Validation"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-validatevalidatable-objecttovalidate",children:(0,s.jsx)(t.code,{children:"public static void validate(Validatable objectToValidate)"})}),"\n",(0,s.jsx)(t.p,{children:"Throw a validation exception if result has an error."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-validatevalidatable-objecttovalidate-string-resulttype",children:(0,s.jsx)(t.code,{children:"public static void validate(Validatable objectToValidate, String resultType)"})}),"\n",(0,s.jsx)(t.p,{children:"Throw a validation exception if result has an error."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-requirevaluestring-valuename-object-value",children:(0,s.jsx)(t.code,{children:"public static void requireValue(String valueName, Object value)"})}),"\n",(0,s.jsx)(t.p,{children:"Require a value."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-requirevalueinsetstring-valuename-string-value-setstring-validvalues-boolean-required",children:(0,s.jsx)(t.code,{children:"public static void requireValueInSet(String valueName, String value, Set<String> validValues, Boolean required)"})}),"\n",(0,s.jsx)(t.p,{children:"Require value to be in specified set of values."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-requirevalueinsetstring-valuename-string-value-setstring-validvalues",children:(0,s.jsx)(t.code,{children:"public static void requireValueInSet(String valueName, String value, Set<String> validValues)"})}),"\n",(0,s.jsx)(t.p,{children:"Require value to be in specified set of values."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-requirenonemptyliststring-valuename-listobject-value",children:(0,s.jsx)(t.code,{children:"public static void requireNonemptyList(String valueName, List<Object> value)"})}),"\n",(0,s.jsx)(t.p,{children:"Require list to be present and not empty"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-boolean-isemptylistlistobject-val",children:(0,s.jsx)(t.code,{children:"public static Boolean isEmptyList(List<Object> val)"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"sobject-methods",children:"SObject methods"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-boolean-existslistsobject-sobjectlist",children:(0,s.jsx)(t.code,{children:"public static Boolean exists(List<SObject> sObjectList)"})}),"\n",(0,s.jsx)(t.p,{children:"Convenience function for easier reading when evaluating result of SOQL"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-listsobject-atleastonesobjecttype-objecttype-listsobject-sobjectlist",children:(0,s.jsx)(t.code,{children:"public static List<SObject> atLeastOne(SObjectType objectType, List<SObject> sObjectList)"})}),"\n",(0,s.jsx)(t.p,{children:"Throws if there's not at least one record in result set."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-sobject-exactlyonesobjecttype-objecttype-listsobject-sobjectlist",children:(0,s.jsx)(t.code,{children:"public static SObject exactlyOne(SObjectType objectType, List<SObject> sObjectList)"})}),"\n",(0,s.jsx)(t.p,{children:"Throws if there's not exactly one record in result set."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-sobject-atmostonesobjecttype-objecttype-listsobject-sobjectlist",children:(0,s.jsx)(t.code,{children:"public static SObject atMostOne(SObjectType objectType, List<SObject> sObjectList)"})}),"\n",(0,s.jsx)(t.p,{children:"Throws if there are more than one record in result set."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-listsobject-filterbyrecordtypelistsobject-records-id-recordtypeid",children:(0,s.jsx)(t.code,{children:"public static List<SObject> filterByRecordType(List<SObject> records, Id recordTypeId)"})}),"\n",(0,s.jsx)(t.p,{children:"Filters list of SObjects with the given recordTypeId"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-setid-getidsetlistsobject-records-sobjectfield-idfield",children:(0,s.jsx)(t.code,{children:"public static Set<Id> getIdSet(List<SObject> records, SObjectField idField)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns set of Ids by scanning all records in list for specified Id field."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-setstring-getfieldvaluesfromrecordslistsobject-records-sobjectfield-fieldname",children:(0,s.jsx)(t.code,{children:"public static Set<String> getFieldValuesFromRecords(List<SObject> records, SObjectField fieldName)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns set of Strings by scanning all records in list for specified fieldName."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-getstringfromresourcestring-resourcename",children:(0,s.jsx)(t.code,{children:"public static String getStringFromResource(String resourceName)"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"SUPPRESSWARNINGS"})}),"\n",(0,s.jsx)(t.p,{children:"Grab the string body from a static resource"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-object-getobjectfromresourcestring-resourcename-type-resourcetype",children:(0,s.jsx)(t.code,{children:"public static Object getObjectFromResource(String resourceName, Type resourceType)"})}),"\n",(0,s.jsx)(t.p,{children:"Grab a serialized object from a static resource"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-listobject-getobjectlistsetsobjectfield-objectset",children:(0,s.jsx)(t.code,{children:"public static List<Object> getObjectList(Set<SObjectField> objectSet)"})}),"\n",(0,s.jsx)(t.p,{children:"Convert set of object to list of object"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"record-type-methods",children:"Record Type methods"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-mapstringrecordtype-getallrecordtypes",children:(0,s.jsx)(t.code,{children:"public static Map<String,RecordType> getAllRecordTypes()"})}),"\n",(0,s.jsx)(t.p,{children:"Get all record types map with its object and developer name as the key"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-recordtype-getrecordtypebynamesobjecttype-objecttype-string-developername",children:(0,s.jsx)(t.code,{children:"public static RecordType getRecordTypeByName(SObjectType objectType, String developerName)"})}),"\n",(0,s.jsx)(t.p,{children:"Get a record type by its object and developer name"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-id-getrecordtypeidsobjecttype-objecttype-string-developername",children:(0,s.jsx)(t.code,{children:"public static Id getRecordTypeId(SObjectType objectType, String developerName)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns Id for record type name"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-getrecordtypelabelsobjecttype-objecttype-string-developername",children:(0,s.jsx)(t.code,{children:"public static String getRecordTypeLabel(SObjectType objectType, String developerName)"})}),"\n",(0,s.jsx)(t.p,{children:"Get the display label for record type."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-recordtypeinfo-getrecordtypeinfobynamestring-objecttypename-string-developername",children:(0,s.jsx)(t.code,{children:"public static RecordTypeInfo getRecordTypeInfoByName(String objectTypeName, String developerName)"})}),"\n",(0,s.jsxs)(t.p,{children:["Get the ",(0,s.jsx)(t.code,{children:"Schema.RecordTypeInfo"})," for record type."]}),"\n",(0,s.jsx)(t.h5,{id:"public-static-boolean-hasrecordtypesobject-record-setstring-developernames",children:(0,s.jsx)(t.code,{children:"public static Boolean hasRecordType(SObject record, Set<String> developerNames)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns true if the record has one of the specific record type names"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-boolean-isrecordtypesobject-record-string-developername",children:(0,s.jsx)(t.code,{children:"public static Boolean isRecordType(SObject record, String developerName)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns true if the record has the specific record type name"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"namespace-prefix-handling",children:"Namespace prefix handling"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-appendprefixstring-valuetoprefix",children:(0,s.jsx)(t.code,{children:"public static String appendPrefix(String valueToPrefix)"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"null-safe-operations",children:"Null-safe operations"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-ifnullobject-value",children:(0,s.jsx)(t.code,{children:"public static String ifNull(Object value)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns empty String in Null case."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-ifnullstring-value-string-defaultvalue",children:(0,s.jsx)(t.code,{children:"public static String ifNull(String value, String defaultValue)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-ifnullobject-value-string-defaultvalue",children:(0,s.jsx)(t.code,{children:"public static String ifNull(Object value, String defaultValue)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-static-integer-ifnullinteger-value-integer-defaultvalue",children:(0,s.jsx)(t.code,{children:"public static Integer ifNull(Integer value, Integer defaultValue)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-static-integer-ifnulldecimal-value-integer-defaultvalue",children:(0,s.jsx)(t.code,{children:"public static Integer ifNull(Decimal value, Integer defaultValue)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-static-decimal-ifnulldecimal-value-decimal-defaultvalue",children:(0,s.jsx)(t.code,{children:"public static Decimal ifNull(Decimal value, Decimal defaultValue)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-static-date-ifnulldate-value-date-defaultvalue",children:(0,s.jsx)(t.code,{children:"public static Date ifNull(Date value, Date defaultValue)"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"misc",children:"Misc"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-mapstringsetstring-getsobjectfieldnameslistsobject-records",children:(0,s.jsx)(t.code,{children:"public static Map<String,Set<String>> getSObjectFieldNames(List<SObject> records)"})}),"\n",(0,s.jsx)(t.p,{children:"Returns all SObject fields maped by SObject name"}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-splitstringintosobjectfieldssobject-sobj-listschemasobjectfield-fields-string-value",children:(0,s.jsx)(t.code,{children:"public static void splitStringIntoSObjectFields(SObject sobj, List<Schema.SObjectField> fields, String value)"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"SUPPRESSWARNINGS"})}),"\n",(0,s.jsx)(t.p,{children:"Method used to split String between fields based on each field length if value is blank, all fields will be cleared."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-void-abbreviateexcessivetextfieldssobject-entity",children:(0,s.jsx)(t.code,{children:"public static void abbreviateExcessiveTextFields(SObject entity)"})}),"\n",(0,s.jsx)(t.p,{children:"Method used to abbreviate text and textarea SObject fields according to the defined field length. Use this method before DML operations to avoid exceptions in case of either field constraints or field value source is out of your control."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-mapidlistsobject-tomapbyparentidlistsobject-records-sobjectfield-parentfield",children:(0,s.jsx)(t.code,{children:"public static Map<Id,List<SObject>> toMapByParentId(List<SObject> records, SObjectField parentField)"})}),"\n",(0,s.jsxs)(t.p,{children:["Returns SObjects mapped by value of ",(0,s.jsx)(t.code,{children:"parentField"})]}),"\n",(0,s.jsx)(t.h5,{id:"public-static-mapidlistsobject-tomapbyparentidlistsobject-records-sobjectfield-parentfield-setid-parentkeys",children:(0,s.jsx)(t.code,{children:"public static Map<Id,List<SObject>> toMapByParentId(List<SObject> records, SObjectField parentField, Set<Id> parentKeys)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-static-mapstringlistsobject-tomapbycompoundidlistsobject-records-listsobjectfield-parentfields",children:(0,s.jsx)(t.code,{children:"public static Map<String,List<SObject>> toMapByCompoundId(List<SObject> records, List<SObjectField> parentFields)"})}),"\n",(0,s.jsxs)(t.p,{children:["Returns SObjects mapped by compound value of ",(0,s.jsx)(t.code,{children:"parentFields"}),", see ",(0,s.jsx)(t.a,{href:"#public-static-mapidlistsobject-tomapbyparentidlistsobject-records-sobjectfield-parentfield",children:"toMapByParentId()"})," and ",(0,s.jsx)(t.a,{href:"#public-static-string-getconcatenatedvaluesobject-record-listsobjectfield-fields",children:"getConcatenatedValue()"})]}),"\n",(0,s.jsx)(t.h5,{id:"public-static-mapidmapidlistsobject-tomapbyparentidbyparentidlistsobject-records-sobjectfield-outerparentid-sobjectfield-innerparentid",children:(0,s.jsx)(t.code,{children:"public static Map<Id,Map<Id,List<SObject>>> toMapByParentIdByParentId(List<SObject> records, SObjectField outerParentId, SObjectField innerParentId)"})}),"\n",(0,s.jsxs)(t.p,{children:["Returns SObjects mapped by value of ",(0,s.jsx)(t.code,{children:"innerParentId"})," and then by ",(0,s.jsx)(t.code,{children:"outerParentId"}),". See ",(0,s.jsx)(t.a,{href:"#public-static-mapidlistsobject-tomapbyparentidlistsobject-records-sobjectfield-parentfield",children:"toMapByParentId()"})]}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-getconcatenatedvaluesobject-record-listsobjectfield-fields",children:(0,s.jsx)(t.code,{children:"public static String getConcatenatedValue(SObject record, List<SObjectField> fields)"})}),"\n",(0,s.jsx)(t.p,{children:"An utility to assemble compound string value for a given SObject and given fields separated by ':' (e.g. 'Foo:Bar:777')."}),"\n",(0,s.jsx)(t.h5,{id:"public-static-string-concatobjectstringfieldssobject-sobj-listschemasobjectfield-fields",children:(0,s.jsx)(t.code,{children:"public static String concatObjectStringFields(SObject sobj, List<Schema.SObjectField> fields)"})}),"\n",(0,s.jsx)(t.p,{children:"Method used to concatenate values of related fields into single string (ex: Access Token stored in 5 different fields because of it`s length)"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"enums",children:"Enums"}),"\n",(0,s.jsx)(t.h3,{id:"operator",children:"Operator"}),"\n",(0,s.jsx)(t.p,{children:"Conditional operators"}),"\n",(0,s.jsx)(t.h3,{id:"logical",children:"Logical"}),"\n",(0,s.jsx)(t.p,{children:"Logical operators"}),"\n",(0,s.jsx)(t.h3,{id:"sortdir",children:"SortDir"}),"\n",(0,s.jsx)(t.p,{children:"Sort directions"}),"\n",(0,s.jsx)(t.h3,{id:"nullorder",children:"NullOrder"}),"\n",(0,s.jsx)(t.p,{children:"Null sorting"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(t.h3,{id:"businessexception",children:"BusinessException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown when a business rule has been violated. In general, that means result is safe to show to the caller."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/AqLib-Website/apex/core/AqException",children:"AqException"}),"\n>\nBusinessException"]}),"\n",(0,s.jsx)(t.h4,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-businessexceptionaqresult-result-public-businessexceptionstring-message-string-scopetype-string-scope-string-code-public-businessexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public BusinessException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public BusinessException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public BusinessException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"validationexception",children:"ValidationException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown when general validation fails."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"ValidationException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-1",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-1",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-validationexceptionaqresult-result-public-validationexceptionstring-message-string-scopetype-string-scope-string-code-public-validationexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public ValidationException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public ValidationException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public ValidationException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"userexception",children:"UserException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown specifically in UI environment, intended to be show to a user."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"UserException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-2",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-2",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-userexceptionaqresult-result-public-userexceptionstring-message-string-scopetype-string-scope-string-code-public-userexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public UserException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public UserException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public UserException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"notfoundexception",children:"NotFoundException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown when record is not found."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"NotFoundException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-3",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-3",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-notfoundexceptionaqresult-result-public-notfoundexceptionstring-message-string-scopetype-string-scope-string-code-public-notfoundexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public NotFoundException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public NotFoundException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public NotFoundException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"recordcountexception",children:"RecordCountException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown when wrong number of records found."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"RecordCountException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-4",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-4",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-recordcountexceptionaqresult-result-public-recordcountexceptionstring-message-string-scopetype-string-scope-string-code-public-recordcountexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public RecordCountException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public RecordCountException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public RecordCountException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"permissionexception",children:"PermissionException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown on CRUD/FLS or other permission rule violated"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"PermissionException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-5",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-5",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-permissionexceptionaqresult-result-public-permissionexceptionstring-message-string-scopetype-string-scope-string-code-public-permissionexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public PermissionException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public PermissionException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public PermissionException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"querypermissionexception",children:"QueryPermissionException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown on CRUD/FLS permission rule violated on SOQL query"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"QueryPermissionException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-6",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-6",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-querypermissionexceptionaqresult-result-public-querypermissionexceptionstring-message-string-scopetype-string-scope-string-code-public-querypermissionexceptionstring-message-string-scopetype-string-scope-public-querypermissionexceptionqueryexception-originexception",children:["####### ",(0,s.jsx)(t.code,{children:"public QueryPermissionException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public QueryPermissionException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public QueryPermissionException(String message, String scopeType, String scope)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public QueryPermissionException(QueryException originException)"})]}),"\n",(0,s.jsx)(t.h3,{id:"duplicateexception",children:"DuplicateException"}),"\n",(0,s.jsx)(t.p,{children:"Thrown on any duplicate record exception"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Inheritance"})}),"\n",(0,s.jsx)(t.p,{children:"DuplicateException"}),"\n",(0,s.jsx)(t.h4,{id:"constructors-7",children:"Constructors"}),"\n",(0,s.jsx)(t.h5,{id:"additional-custom-exceptions-7",children:"Additional custom exceptions"}),"\n",(0,s.jsxs)(t.h2,{id:"-public-duplicateexceptionaqresult-result-public-duplicateexceptionstring-message-string-scopetype-string-scope-string-code-public-duplicateexceptionstring-message-string-scopetype-string-scope",children:["####### ",(0,s.jsx)(t.code,{children:"public DuplicateException(AqResult result)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public DuplicateException(String message, String scopeType, String scope, String code)"}),"\n####### ",(0,s.jsx)(t.code,{children:"public DuplicateException(String message, String scopeType, String scope)"})]}),"\n",(0,s.jsx)(t.h3,{id:"value",children:"Value"}),"\n",(0,s.jsx)(t.p,{children:"Can be extended by a class that should be able to be compared for equality."}),"\n",(0,s.jsx)(t.h4,{id:"methods-1",children:"Methods"}),"\n",(0,s.jsx)(t.h5,{id:"public-boolean-equalsobject-obj",children:(0,s.jsx)(t.code,{children:"public Boolean equals(Object obj)"})}),"\n",(0,s.jsx)(t.h5,{id:"public-integer-hashcode",children:(0,s.jsx)(t.code,{children:"public Integer hashCode()"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,s.jsx)(t.h3,{id:"formatable",children:"Formatable"}),"\n",(0,s.jsx)(t.p,{children:"Implemented by anything that can be formatted to text."}),"\n",(0,s.jsx)(t.h4,{id:"methods-2",children:"Methods"}),"\n",(0,s.jsx)(t.h5,{id:"public-string-tostring",children:(0,s.jsx)(t.code,{children:"public String toString()"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"validatable",children:"Validatable"}),"\n",(0,s.jsx)(t.p,{children:"Implemented by object that can be validated and throws exception if validation fails."}),"\n",(0,s.jsx)(t.h4,{id:"methods-3",children:"Methods"}),"\n",(0,s.jsx)(t.h5,{id:"public-aqresult-validate",children:(0,s.jsx)(t.code,{children:"public AqResult validate()"})}),"\n",(0,s.jsx)(t.hr,{})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>n,x:()=>o});var c=i(96540);const s={},l=c.createContext(s);function n(e){const t=c.useContext(l);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),c.createElement(l.Provider,{value:t},e.children)}}}]);
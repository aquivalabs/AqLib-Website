"use strict";(self.webpackChunkAqLib_documentation_website=self.webpackChunkAqLib_documentation_website||[]).push([[2715],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}},63440:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"modules/credentials-config/README","title":"Credentials configuration module","description":"This module helps to quickly create lwc page with custom set of required credential fields (e.g. for API integration).","source":"@site/../documentation/modules/credentials-config/README.md","sourceDirName":"modules/credentials-config","slug":"/modules/credentials-config/","permalink":"/AqLib-Website/modules/credentials-config/","draft":false,"unlisted":false,"editUrl":"https://bitbucket.org/aquiva/aqlib/src/main/documentation/../documentation/modules/credentials-config/README.md","tags":[],"version":"current","lastUpdatedBy":"Artem Kniazev","lastUpdatedAt":1721818396000,"frontMatter":{"link_to_source":"AqLib/modules/credentials-config"},"sidebar":"documentation","previous":{"title":"Modules","permalink":"/AqLib-Website/category/modules"},"next":{"title":"CredentialsConfigCtrl","permalink":"/AqLib-Website/modules/credentials-config/CredentialsConfigCtrl"}}');var t=s(74848),r=s(28453);const d={link_to_source:"AqLib/modules/credentials-config"},l="Credentials configuration module",o={},a=[{value:"Credentials form",id:"credentials-form",level:2},{value:"APEX classes",id:"apex-classes",level:2},{value:"Custom Settings",id:"custom-settings",level:2},{value:"Custom Validator Class",id:"custom-validator-class",level:3},{value:"Integration Credential Fields",id:"integration-credential-fields",level:3},{value:"Integration Credentials",id:"integration-credentials",level:3},{value:"Token fields",id:"token-fields",level:4},{value:"Dependencies",id:"dependencies",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"credentials-configuration-module",children:"Credentials configuration module"})}),"\n",(0,t.jsx)(n.p,{children:"This module helps to quickly create lwc page with custom set of required credential fields (e.g. for API integration).\nIt consists of three parts:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Credentials Form (LWC)"}),"\n",(0,t.jsx)(n.li,{children:"APEX classes (Controller)"}),"\n",(0,t.jsx)(n.li,{children:"Custom Settings (Data model and storage)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"credentials-form",children:"Credentials form"}),"\n",(0,t.jsxs)(n.p,{children:["It represents a form with the current user credentials and with the ability to edit and save data.\nNo configuration needed here. Simply, put ",(0,t.jsx)(n.code,{children:"c-credentials-config"})," component where it needs to be."]}),"\n",(0,t.jsx)(n.h2,{id:"apex-classes",children:"APEX classes"}),"\n",(0,t.jsxs)(n.p,{children:["In order to validate user credentials before saving, you have to extend ",(0,t.jsx)(n.code,{children:"CredentialsValidator"})," class and override one method"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-apex",children:"AqResult validate(Map<String, String> credentials)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use an existing ",(0,t.jsx)(n.code,{children:"AqTest_CredentialsValidator.ExampleCredentialsValidator"})," as an example. Put the name of the created class to ",(0,t.jsx)(n.code,{children:"CredentialCustomValidator__c"})," settings (see ",(0,t.jsx)(n.strong,{children:"Custom Validator Class"})," below)."]}),"\n",(0,t.jsx)(n.h2,{id:"custom-settings",children:"Custom Settings"}),"\n",(0,t.jsx)(n.p,{children:"For proper functioning of the module, you will have to add new Custom Settings values.\nThere are three Custom Settings objects:"}),"\n",(0,t.jsx)(n.h3,{id:"custom-validator-class",children:"Custom Validator Class"}),"\n",(0,t.jsxs)(n.p,{children:["or ",(0,t.jsx)(n.code,{children:"CredentialCustomValidator__c"})," settings. Use it to store the name of the class that extends ",(0,t.jsx)(n.code,{children:"CredentialsValidator"})," (e.g. 'ExampleCredentialsValidator')."]}),"\n",(0,t.jsxs)(n.p,{children:["Add a settings record populating class name to 'Validator Class Name' (",(0,t.jsx)(n.strong,{children:"ClassName__c"}),") field."]}),"\n",(0,t.jsx)(n.h3,{id:"integration-credential-fields",children:"Integration Credential Fields"}),"\n",(0,t.jsxs)(n.p,{children:["or ",(0,t.jsx)(n.code,{children:"CredentialsFields__c"})," represents a set of required fields to be filled by user (on the ",(0,t.jsx)(n.em,{children:"Form"}),"). It is the ",(0,t.jsx)(n.em,{children:"List"})," CustomSettings."]}),"\n",(0,t.jsx)(n.p,{children:"Start with filling the required fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Field Name"}),": Case insensitive field name to store user value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Field label"}),": Title of the corresponding input component to be displayed on the ",(0,t.jsx)(n.em,{children:"Form"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"There are more non-required fields for deeper configuration:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Field position order"}),": Unique number used to sort fields on the page"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input field size"}),": Consider it as a ",(0,t.jsx)(n.em,{children:"Picklist"}),". ",(0,t.jsx)(n.code,{children:"small"}),", ",(0,t.jsx)(n.code,{children:"medium"})," and  ",(0,t.jsx)(n.code,{children:"large"})," to fill 1/3, 1/2 and 1/1 width of the ",(0,t.jsx)(n.em,{children:"Form"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input type"}),": Consider it as a ",(0,t.jsx)(n.em,{children:"Picklist"}),". ",(0,t.jsx)(n.code,{children:"password"})," to display password input, ",(0,t.jsx)(n.code,{children:"textarea"})," to input values larger than 255 symbols (e.g. tokens), ",(0,t.jsx)(n.code,{children:"text"})," - otherwise (default value)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"integration-credentials",children:"Integration Credentials"}),"\n",(0,t.jsxs)(n.p,{children:["or ",(0,t.jsx)(n.code,{children:"Credentials__c"})," are ",(0,t.jsx)(n.em,{children:"hierarchical"})," Custom Settings to store user credentials."]}),"\n",(0,t.jsxs)(n.p,{children:["It is required that every ",(0,t.jsx)(n.code,{children:"CredentialsFields__c"})," value (i.e. every credential field) has the matching field in ",(0,t.jsx)(n.code,{children:"Credentials__c"})," Custom Settings (use CredentialsFields__c.Name__c as ",(0,t.jsx)(n.strong,{children:"Field Name"})," for ",(0,t.jsx)(n.code,{children:"Credentials__c"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["For convenience, ",(0,t.jsx)(n.code,{children:"Credentials__c"})," already has some frequently used fields (e.g. 'Password', so you don't need to add it here after putting it as a ",(0,t.jsx)(n.code,{children:"CredentialsFields__c"})," value)."]}),"\n",(0,t.jsx)(n.h4,{id:"token-fields",children:"Token fields"}),"\n",(0,t.jsxs)(n.p,{children:["To store large values (255 - 1020 symbols) after marking it as a ",(0,t.jsx)(n.code,{children:"textarea"})," in ",(0,t.jsx)(n.code,{children:"CredentialsFields__c"})," you have to add 4 fields to ",(0,t.jsx)(n.code,{children:"Credentials__c"})," adding 1, 2, 3 and 4 to the end of the FieldName."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, we want an Access Token to be inserted by a user. Firstly, create new ",(0,t.jsx)(n.code,{children:"CredentialsFields__c"})," record: ",(0,t.jsx)(n.strong,{children:"Label"}),": 'Access Token', ",(0,t.jsx)(n.strong,{children:"Name"}),": 'AccessToken', ",(0,t.jsx)(n.strong,{children:"Type"}),": 'textarea'. And then add 4 corresponding ",(0,t.jsx)(n.code,{children:"Credentials__c"})," fields: with ",(0,t.jsx)(n.strong,{children:"Name"})," AccessToken1, AccessToken2, AccessToken3, AccessToken4 (put 255 as a Length, the Label is arbitrary)."]}),"\n",(0,t.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../../apex/core",children:"Apex Core"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
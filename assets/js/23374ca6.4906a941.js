"use strict";(self.webpackChunkAqLib_documentation_website=self.webpackChunkAqLib_documentation_website||[]).push([[2278],{18762:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/em-approval-08820b8b1646e7538b484f307d7235d7.png"},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},62301:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"README","title":"Contribute","description":"We would like to encourage every of you to share your components and snippets withing this repository","source":"@site/docs/README.md","sourceDirName":".","slug":"/","permalink":"/AqLib-Website/contribute/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"contribute","next":{"title":"Create a document","permalink":"/AqLib-Website/contribute/create-a-document"}}');var o=i(74848),s=i(28453);const r={sidebar_position:1},a="Contribute",c={},l=[{value:"Branching Scheme",id:"branching-scheme",level:2},{value:"Conventional Commits",id:"conventional-commits",level:2},{value:"Help yourself to write better commit messages with the handy tools",id:"help-yourself-to-write-better-commit-messages-with-the-handy-tools",level:3},{value:"Why Use Conventional Commits",id:"why-use-conventional-commits",level:3},{value:"Commit message with description",id:"commit-message-with-description",level:4},{value:"Commit message with scope",id:"commit-message-with-scope",level:4},{value:"Commit message with Jira reference",id:"commit-message-with-jira-reference",level:4},{value:"Commit message with multiple changes",id:"commit-message-with-multiple-changes",level:4},{value:"Commit message with description and breaking change footer",id:"commit-message-with-description-and-breaking-change-footer",level:4},{value:"Commit message with ! to draw attention to breaking change",id:"commit-message-with--to-draw-attention-to-breaking-change",level:4},{value:"Commit message with scope and ! to draw attention to breaking change",id:"commit-message-with-scope-and--to-draw-attention-to-breaking-change",level:4},{value:"Commit message with both ! and BREAKING CHANGE footer",id:"commit-message-with-both--and-breaking-change-footer",level:4},{value:"Commit message with no body",id:"commit-message-with-no-body",level:4},{value:"Commit message with scope",id:"commit-message-with-scope-1",level:4},{value:"Commit message with multi-paragraph body and multiple footers",id:"commit-message-with-multi-paragraph-body-and-multiple-footers",level:4},{value:"Specification",id:"specification",level:3},{value:"Merge yourself after getting one approval from the Engineering\xa0Manager",id:"merge-yourself-after-getting-one-approval-from-the-engineeringmanager",level:2},{value:"Join slack channel #AqLib",id:"join-slack-channel-aqlib",level:2},{value:"Jira project AQ",id:"jira-project-aq",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"contribute",children:"Contribute"})}),"\n",(0,o.jsxs)(n.p,{children:["We would like to encourage every of you to share your components and snippets withing this repository\nAqLib is built for you ",(0,o.jsx)(n.strong,{children:"by you"}),"!"]}),"\n",(0,o.jsx)(n.h2,{id:"branching-scheme",children:"Branching Scheme"}),"\n",(0,o.jsxs)(n.p,{children:["Let's use simple branching scheme with only feature branches being created for your work.\nPlease merge your pull requests directly into ",(0,o.jsx)(n.code,{children:"main"})," branch, no develop branch needed."]}),"\n",(0,o.jsx)(n.mermaid,{value:"%%{init: { 'themeVariables': { \n    'git0': '#5A99E6', \n    'git1': '#352694',\n    'gitBranchLabel0': '#ffffff',\n    'gitBranchLabel1': '#ffffff' \n} } }%%\ngitGraph\n    checkout main\n    commit tag: \"v3.12.5\"\n    \n    branch feature/AQ-123-my-component\n    checkout feature/AQ-123-my-component\n    commit id: \"fix(my-component): AQ-123 handle null pointer\"\n    commit id: \"feat(my-component): AQ-123 print functionality\"\n    checkout main\n    merge feature/AQ-123-my-component\n    \n%%  Automatic release\n    commit id: \"chore(release): release 3.13.0\"  tag: \"v3.13.0\"\n\n    branch feature/my-component-2\n    checkout feature/my-component-2\n    commit id: \"refactor(my-component-2): remove redundant code\"\n    commit id: \"docs(my-component-2): better description\"\n    checkout main\n    merge feature/my-component-2\n\n%%  Automatic release\n    commit id: \"chore(release): release 3.13.1\"  tag: \"v3.13.1\""}),"\n",(0,o.jsx)(n.h2,{id:"conventional-commits",children:"Conventional Commits"}),"\n",(0,o.jsxs)(n.p,{children:["This repository implements ",(0,o.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"conventional commits"})," specification which means\nfollowing a few simple rules we can add human and machine-readable meaning to commit messages. The commit message should be structured as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n"})}),"\n",(0,o.jsx)(n.p,{children:"The commit contains the following structural elements,\nto communicate intent to the consumers of AqLib and automatically update CHANGELOG:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"<type>"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"feat"}),": A new feature or"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"fix"}),": A bug fix"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"docs:"}),": Documentation only changes"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"chore:"}),": documentation updates"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"refactor"}),": A code change that neither fixes a bug nor adds a feature"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"style"}),": Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"perf"}),": A code change that improves performance"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"test"}),": Adding missing or correcting existing tests"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"build"}),": Changes that affect the build system or external dependencies (example scopes: website, sfdx, npm)"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"ci"}),": Changes to CI configuration files and scripts"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"chore"}),": Small, low-priority code change that doesn\u2019t relate directly to adding new features or fixing bugs"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["other ",(0,o.jsx)(n.em,{children:"types"})," are also allowed"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"help-yourself-to-write-better-commit-messages-with-the-handy-tools",children:"Help yourself to write better commit messages with the handy tools"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["VSCode Extension ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits",children:'"Conventional Commits" by vivaxy'})]}),"\n",(0,o.jsxs)(n.li,{children:["Intellij IDEA Plugin ",(0,o.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/13389-conventional-commit",children:'"Conventional Commit" by Edoardo Luppi'})]}),"\n",(0,o.jsxs)(n.li,{children:["CLI tool ",(0,o.jsx)(n.a,{href:"https://commitizen-tools.github.io/commitizen/",children:'"Commitizen"'})]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/about/",children:"More tools"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"why-use-conventional-commits",children:"Why Use Conventional Commits"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Automatically generating CHANGELOG."}),"\n",(0,o.jsx)(n.li,{children:"Automatically determining a semantic version bump (based on the types of commits landed)."}),"\n",(0,o.jsx)(n.li,{children:"Communicating the nature of changes to teammates, the public, and other stakeholders."}),"\n",(0,o.jsx)(n.li,{children:"Triggering build and publish processes."}),"\n",(0,o.jsx)(n.li,{children:"Making it easier for people to contribute, by allowing them to explore a more structured commit history."}),"\n"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Examples"}),(0,o.jsx)(n.h4,{id:"commit-message-with-description",children:"Commit message with description"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat: allow provided config object to extend other configs\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-scope",children:"Commit message with scope"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat(api): send an email to the customer when a product is shipped\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-jira-reference",children:"Commit message with Jira reference"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat(invoices): AQ-123 module to autogenerate invoices\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-multiple-changes",children:"Commit message with multiple changes"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"fix: prevent racing of requests\n\nIntroduce a request id and a reference to latest request. Dismiss\nincoming responses other than from latest request.\n\nRemove timeouts which were used to mitigate the racing issue but are\nobsolete now.\n\nReviewed-by: Z\nRefs: #123\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-description-and-breaking-change-footer",children:"Commit message with description and breaking change footer"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with--to-draw-attention-to-breaking-change",children:"Commit message with ! to draw attention to breaking change"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat!: send an email to the customer when a product is shipped\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-scope-and--to-draw-attention-to-breaking-change",children:"Commit message with scope and ! to draw attention to breaking change"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat(api)!: send an email to the customer when a product is shipped\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-both--and-breaking-change-footer",children:"Commit message with both ! and BREAKING CHANGE footer"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"chore!: drop support for Node 6\n\nBREAKING CHANGE: use JavaScript features not available in Node 6.\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-no-body",children:"Commit message with no body"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"docs: correct spelling of CHANGELOG\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-scope-1",children:"Commit message with scope"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"feat(lang): add Polish language\n"})}),(0,o.jsx)(n.h4,{id:"commit-message-with-multi-paragraph-body-and-multiple-footers",children:"Commit message with multi-paragraph body and multiple footers"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"fix: prevent racing of requests\n\nIntroduce a request id and a reference to latest request. Dismiss\nincoming responses other than from latest request.\n\nRemove timeouts which were used to mitigate the racing issue but are\nobsolete now.\n\nReviewed-by: Z\nRefs: #123\n"})}),(0,o.jsx)(n.h3,{id:"specification",children:"Specification"}),(0,o.jsx)(n.p,{children:"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this document are to be interpreted as described in RFC 2119."}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Commits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space."}),"\n",(0,o.jsx)(n.li,{children:"The type feat MUST be used when a commit adds a new feature to your application or library."}),"\n",(0,o.jsx)(n.li,{children:"The type fix MUST be used when a commit represents a bug fix for your application."}),"\n",(0,o.jsx)(n.li,{children:"A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser):"}),"\n",(0,o.jsx)(n.li,{children:"A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string."}),"\n",(0,o.jsx)(n.li,{children:"A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description."}),"\n",(0,o.jsx)(n.li,{children:"A commit body is free-form and MAY consist of any number of newline separated paragraphs."}),"\n",(0,o.jsxs)(n.li,{children:["One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a :",(0,o.jsx)(n.code,{children:"<space>"})," or ",(0,o.jsx)(n.code,{children:"<space>#"})," separator, followed by a string value (this is inspired by the git trailer convention)."]}),"\n",(0,o.jsx)(n.li,{children:"A footer\u2019s token MUST use - in place of whitespace characters, e.g., Acked-by (this helps differentiate the footer section from a multi-paragraph body). An exception is made for BREAKING CHANGE, which MAY also be used as a token."}),"\n",(0,o.jsx)(n.li,{children:"A footer\u2019s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer token/separator pair is observed."}),"\n",(0,o.jsx)(n.li,{children:"Breaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer."}),"\n",(0,o.jsx)(n.li,{children:"If included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon, space, and description, e.g., BREAKING CHANGE: environment variables now take precedence over config files."}),"\n",(0,o.jsx)(n.li,{children:"If included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is used, BREAKING CHANGE: MAY be omitted from the footer section, and the commit description SHALL be used to describe the breaking change."}),"\n",(0,o.jsx)(n.li,{children:"Types other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs."}),"\n",(0,o.jsx)(n.li,{children:"The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase."}),"\n",(0,o.jsx)(n.li,{children:"BREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer."}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"merge-yourself-after-getting-one-approval-from-the-engineeringmanager",children:"Merge yourself after getting one approval from the Engineering\xa0Manager"}),"\n",(0,o.jsxs)(n.p,{children:["Please feel free to merge your pull requests yourself after getting one approval from your Engineering Managers.\nAdd your teammates as optional.\nYou don't need to wait and ask permission from maintainers to merge to main branch.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.img,{alt:"em-approval.png",src:i(18762).A+"",width:"131",height:"39"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://aquivalabs.slack.com/team/U1JCA0TJ7",children:"@akniazev"})," is responsible to retrospectively oversee changes commited and reach out if something terrible happens \ud83d\ude04"]}),"\n",(0,o.jsxs)(n.h2,{id:"join-slack-channel-aqlib",children:["Join slack channel ",(0,o.jsx)(n.a,{href:"https://app.slack.com/client/T0GJ0ACVB/C04T57U7V7F",children:"#AqLib"})]}),"\n",(0,o.jsx)(n.p,{children:"It is an open channel to discuss any topic related to AqLib"}),"\n",(0,o.jsxs)(n.h2,{id:"jira-project-aq",children:["Jira project ",(0,o.jsx)(n.a,{href:"https://aquiva.atlassian.net/jira/software/projects/AQ/boards/165",children:"AQ"})]}),"\n",(0,o.jsx)(n.p,{children:"Attaching Jira ticket to each your commit is not enforced,\nbut the project exists, and it is a best practice to track bigger scopes with it."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
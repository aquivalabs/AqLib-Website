"use strict";(self.webpackChunkAqLib_documentation_website=self.webpackChunkAqLib_documentation_website||[]).push([[5519],{28453:(e,t,r)=>{r.d(t,{R:()=>c,x:()=>l});var d=r(96540);const i={},s=d.createContext(i);function c(e){const t=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),d.createElement(s.Provider,{value:t},e.children)}},37739:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>n});const d=JSON.parse('{"id":"modules/enterprise/AqSObjectUnitOfWork","title":"AqSObjectUnitOfWork","description":"Group modules/enterprise","source":"@site/../documentation/modules/enterprise/AqSObjectUnitOfWork.md","sourceDirName":"modules/enterprise","slug":"/modules/enterprise/AqSObjectUnitOfWork","permalink":"/AqLib-Website/modules/enterprise/AqSObjectUnitOfWork","draft":false,"unlisted":false,"editUrl":"https://bitbucket.org/aquiva/aqlib/src/main/documentation/../documentation/modules/enterprise/AqSObjectUnitOfWork.md","tags":[],"version":"current","lastUpdatedBy":"Artem Kniazev","lastUpdatedAt":1719971610000,"frontMatter":{"layout":"default","autogenerated":true},"sidebar":"documentation","previous":{"title":"AqMethodReturnValue","permalink":"/AqLib-Website/modules/enterprise/AqMethodReturnValue"},"next":{"title":"Mapping Tool","permalink":"/AqLib-Website/modules/mapping-tool/"}}');var i=r(74848),s=r(28453);const c={layout:"default",autogenerated:!0},l="AqSObjectUnitOfWork",o={},n=[{value:"Constructors",id:"constructors",level:2},{value:"<code>public AqSObjectUnitOfWork(List&lt;Schema.SObjectType&gt; givenSObjectTypes)</code>",id:"public-aqsobjectunitofworklistschemasobjecttype-givensobjecttypes",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Fields",id:"fields",level:2},{value:"<code>protected sObjectTypes</code> \u2192 <code>List&lt;Schema.SObjectType&gt;</code>",id:"protected-sobjecttypes--listschemasobjecttype",level:3},{value:"<code>protected newListByType</code> \u2192 <code>Map&lt;String,List&lt;SObject&gt;&gt;</code>",id:"protected-newlistbytype--mapstringlistsobject",level:3},{value:"<code>protected dirtyMapByType</code> \u2192 <code>Map&lt;String,Map&lt;Id,SObject&gt;&gt;</code>",id:"protected-dirtymapbytype--mapstringmapidsobject",level:3},{value:"<code>protected deletedMapByType</code> \u2192 <code>Map&lt;String,Map&lt;Id,SObject&gt;&gt;</code>",id:"protected-deletedmapbytype--mapstringmapidsobject",level:3},{value:"<code>protected relationships</code> \u2192 <code>Map&lt;String,Relationships&gt;</code>",id:"protected-relationships--mapstringrelationships",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>public void registerNew(SObject record)</code>",id:"public-void-registernewsobject-record",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>public void registerNew(List&lt;SObject&gt; records)</code>",id:"public-void-registernewlistsobject-records",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>public void registerNew(SObject record, Schema relatedToParentField, SObject relatedToParentRecord)</code>",id:"public-void-registernewsobject-record-schema-relatedtoparentfield-sobject-relatedtoparentrecord",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>public void registerRelationship(SObject record, Schema relatedToField, SObject relatedTo)</code>",id:"public-void-registerrelationshipsobject-record-schema-relatedtofield-sobject-relatedto",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>public void registerDirty(SObject record)</code>",id:"public-void-registerdirtysobject-record",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>public void registerDirty(SObject record, List&lt;SObjectField&gt; dirtyFields)</code>",id:"public-void-registerdirtysobject-record-listsobjectfield-dirtyfields",level:3},{value:"<code>public void registerDirty(SObject record, Schema relatedToParentField, SObject relatedToParentRecord)</code>",id:"public-void-registerdirtysobject-record-schema-relatedtoparentfield-sobject-relatedtoparentrecord",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>public void registerDirty(List&lt;SObject&gt; records)</code>",id:"public-void-registerdirtylistsobject-records",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>public void registerUpsert(SObject record)</code>",id:"public-void-registerupsertsobject-record",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>public void registerUpsert(List&lt;SObject&gt; records)</code>",id:"public-void-registerupsertlistsobject-records",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>public void registerDeleted(SObject record)</code>",id:"public-void-registerdeletedsobject-record",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>public void registerDeleted(List&lt;SObject&gt; records)</code>",id:"public-void-registerdeletedlistsobject-records",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>public void commitWork()</code>",id:"public-void-commitwork",level:3},{value:"<code>public static AqSObjectUnitOfWork createInstance()</code>",id:"public-static-aqsobjectunitofwork-createinstance",level:3}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:["[ This file is autogenerated from apexdoc ]","\n",(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"aqsobjectunitofwork",children:"AqSObjectUnitOfWork"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Group"})," modules/enterprise"]}),"\n",(0,i.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsx)(t.h3,{id:"public-aqsobjectunitofworklistschemasobjecttype-givensobjecttypes",children:(0,i.jsx)(t.code,{children:"public AqSObjectUnitOfWork(List<Schema.SObjectType> givenSObjectTypes)"})}),"\n",(0,i.jsx)(t.p,{children:"Constructs a new UnitOfWork to support work against the given object list"}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"givenSObjectTypes"})}),(0,i.jsx)(t.td,{children:"A list of objects given in dependency order (least dependent first)"})]})})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"fields",children:"Fields"}),"\n",(0,i.jsxs)(t.h3,{id:"protected-sobjecttypes--listschemasobjecttype",children:[(0,i.jsx)(t.code,{children:"protected sObjectTypes"})," \u2192 ",(0,i.jsx)(t.code,{children:"List<Schema.SObjectType>"})]}),"\n",(0,i.jsxs)(t.h3,{id:"protected-newlistbytype--mapstringlistsobject",children:[(0,i.jsx)(t.code,{children:"protected newListByType"})," \u2192 ",(0,i.jsx)(t.code,{children:"Map<String,List<SObject>>"})]}),"\n",(0,i.jsxs)(t.h3,{id:"protected-dirtymapbytype--mapstringmapidsobject",children:[(0,i.jsx)(t.code,{children:"protected dirtyMapByType"})," \u2192 ",(0,i.jsx)(t.code,{children:"Map<String,Map<Id,SObject>>"})]}),"\n",(0,i.jsxs)(t.h3,{id:"protected-deletedmapbytype--mapstringmapidsobject",children:[(0,i.jsx)(t.code,{children:"protected deletedMapByType"})," \u2192 ",(0,i.jsx)(t.code,{children:"Map<String,Map<Id,SObject>>"})]}),"\n",(0,i.jsxs)(t.h3,{id:"protected-relationships--mapstringrelationships",children:[(0,i.jsx)(t.code,{children:"protected relationships"})," \u2192 ",(0,i.jsx)(t.code,{children:"Map<String,Relationships>"})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registernewsobject-record",children:(0,i.jsx)(t.code,{children:"public void registerNew(SObject record)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a newly created SObject instance to be inserted when commitWork is called"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"A newly created SObject instance to be inserted during commitWork"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registernewlistsobject-records",children:(0,i.jsx)(t.code,{children:"public void registerNew(List<SObject> records)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a list of newly created SObject instances to be inserted when commitWork is called"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"records"})}),(0,i.jsx)(t.td,{children:"A list of newly created SObject instances to be inserted during commitWork"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registernewsobject-record-schema-relatedtoparentfield-sobject-relatedtoparentrecord",children:(0,i.jsx)(t.code,{children:"public void registerNew(SObject record, Schema relatedToParentField, SObject relatedToParentRecord)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a newly created SObject instance to be inserted when commitWork is called, you may also provide a reference to the parent record instance (should also be registered as new separately)"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"A newly created SObject instance to be inserted during commitWork"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"relatedToParentField"})}),(0,i.jsx)(t.td,{children:"A SObjectField reference to the child field that associates the child record with its parent"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"relatedToParentRecord"})}),(0,i.jsx)(t.td,{children:"A SObject instance of the parent record (should also be registered as new separately)"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerrelationshipsobject-record-schema-relatedtofield-sobject-relatedto",children:(0,i.jsx)(t.code,{children:"public void registerRelationship(SObject record, Schema relatedToField, SObject relatedTo)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a relationship between two records that have yet to be inserted to the database. This information will be used during the commitWork phase to make the references only when related records have been inserted to the database."}),"\n",(0,i.jsx)(t.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"An existing or newly created record"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"relatedToField"})}),(0,i.jsx)(t.td,{children:"A SObjectField reference to the lookup field that relates the two records together"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"relatedTo"})}),(0,i.jsx)(t.td,{children:"A SObject instance (yet to be committed to the database)"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerdirtysobject-record",children:(0,i.jsx)(t.code,{children:"public void registerDirty(SObject record)"})}),"\n",(0,i.jsx)(t.p,{children:"Register an existing record to be updated during the commitWork method"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"An existing record"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerdirtysobject-record-listsobjectfield-dirtyfields",children:(0,i.jsx)(t.code,{children:"public void registerDirty(SObject record, List<SObjectField> dirtyFields)"})}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerdirtysobject-record-schema-relatedtoparentfield-sobject-relatedtoparentrecord",children:(0,i.jsx)(t.code,{children:"public void registerDirty(SObject record, Schema relatedToParentField, SObject relatedToParentRecord)"})}),"\n",(0,i.jsx)(t.p,{children:"Register an existing record to be updated when commitWork is called, you may also provide a reference to the parent record instance (should also be registered as new separately)"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"A newly created SObject instance to be inserted during commitWork"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"relatedToParentField"})}),(0,i.jsx)(t.td,{children:"A SObjectField reference to the child field that associates the child record with its parent"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"relatedToParentRecord"})}),(0,i.jsx)(t.td,{children:"A SObject instance of the parent record (should also be registered as new separately)"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerdirtylistsobject-records",children:(0,i.jsx)(t.code,{children:"public void registerDirty(List<SObject> records)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a list of existing records to be updated during the commitWork method"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"records"})}),(0,i.jsx)(t.td,{children:"A list of existing records"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerupsertsobject-record",children:(0,i.jsx)(t.code,{children:"public void registerUpsert(SObject record)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a new or existing record to be inserted/updated during the commitWork method"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"A new or existing record"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerupsertlistsobject-records",children:(0,i.jsx)(t.code,{children:"public void registerUpsert(List<SObject> records)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a list of mix of new and existing records to be inserted updated during the commitWork method"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"records"})}),(0,i.jsx)(t.td,{children:"A list of mix of new and existing records"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerdeletedsobject-record",children:(0,i.jsx)(t.code,{children:"public void registerDeleted(SObject record)"})}),"\n",(0,i.jsx)(t.p,{children:"Register an existing record to be deleted during the commitWork method"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"record"})}),(0,i.jsx)(t.td,{children:"An existing record"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-registerdeletedlistsobject-records",children:(0,i.jsx)(t.code,{children:"public void registerDeleted(List<SObject> records)"})}),"\n",(0,i.jsx)(t.p,{children:"Register a list of existing records to be deleted during the commitWork method"}),"\n",(0,i.jsx)(t.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"records"})}),(0,i.jsx)(t.td,{children:"A list of existing records"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"public-void-commitwork",children:(0,i.jsx)(t.code,{children:"public void commitWork()"})}),"\n",(0,i.jsx)(t.p,{children:"Takes all the work that has been registered with the UnitOfWork and commits it to the database"}),"\n",(0,i.jsx)(t.h3,{id:"public-static-aqsobjectunitofwork-createinstance",children:(0,i.jsx)(t.code,{children:"public static AqSObjectUnitOfWork createInstance()"})}),"\n",(0,i.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);
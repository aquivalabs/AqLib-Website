"use strict";(self.webpackChunkAqLib_documentation_website=self.webpackChunkAqLib_documentation_website||[]).push([[6606],{28453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>o});var t=n(96540);const s={},l=t.createContext(s);function r(e){const a=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:a},e.children)}},31492:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>_,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>t,toc:()=>i});var t=n(67312),s=n(74848),l=n(28453);const r={authors:{name:"Evgenii Azimzhanov",email:"eazimzhanov@aquivalabs.com",image_url:"https://ca.slack-edge.com/T0GJ0ACVB-U3Y5VKY68-755f09b400ae-512",url:"https://aquivalabs.slack.com/team/U3Y5VKY68"}},o="Set the Debug Logs for a user",_={authorsImageUrls:[void 0]},i=[{value:"Usage:",id:"usage",level:2},{value:"Examples:",id:"examples",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:"Sets a debug log for 12 hours for a specific user"}),"\n",(0,s.jsx)(a.h2,{id:"usage",children:"Usage:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"  log_dev.sh [-o arg] [-u arg] -z -h\n  -o  target org to set debug log\n  -u  Name of an entity to set debug log\n"})}),"\n",(0,s.jsx)(a.h2,{id:"examples",children:"Examples:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{children:'  sh log_dev.sh -o a_ea -u Azimzhanov -z\n  sh log_dev.sh -o a_ea -u Azimzhanov\n  sh log_dev.sh -o a_ea -u "Evgenii Azimzhanov"\n  sh log_dev.sh -o a_ea -u "Evgenii Azi"\n'})}),"\n",(0,s.jsx)(a.h1,{id:"script",children:"Script"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'#!/bin/bash\n\nlog_debug() {\n  [[ $DEBUG_MODE == true ]] && { separator; echo "${@}"; }\n}\n\nlog_simple() {\n  echo "${@}"\n}\n\nseparator() {\n  echo "-----------------------------------"\n}\n\nparse_params() {\n  while getopts \'u:o:hz\' opt; do\n    case "$opt" in\n      u) TRACING_ENTITY_NAME="$OPTARG" ;;\n      o) IN_ORG_ALIAS="$OPTARG" ;;\n      z) DEBUG_MODE=true ;;\n      ?|h) show_usage; exit 1 ;;\n    esac\n  done\n  shift "$(($OPTIND -1))"\n  \n  if [[ $DEBUG_MODE == true ]]; then\n    log_debug "Received Params: "\n    echo "TRACING_ENTITY_NAME: $TRACING_ENTITY_NAME"\n    echo "IN_ORG_ALIAS: $IN_ORG_ALIAS"\n    echo "DEBUG_MODE: $DEBUG_MODE"\n  fi\n}\n\nshow_usage() {\n  cat << EOF\n\nSets a debug log for 12 hours\n\nUSAGE:\n  $(basename $0) [-o arg] [-u arg] -z -h\n  -o  target org to set debug log\n  -u  Name of an entity to set debug log\n\nEXAMPLES:\n  sh log_dev.sh -o a_ea -u Azimzhanov -z\n\nEOF\n}\n\ncheck_and_handle_debug_level() {\n  local debug_level_query="SELECT Id FROM DebugLevel WHERE DeveloperName = \'$DEBUG_LEVEL_NAME\'"\n  local debug_level_result=$(sf data query -o "$IN_ORG_ALIAS" -q "$debug_level_query" -t --json)\n  DEBUG_LEVEL_ID=$(jq -r \'.result.records[0].Id\' <<< "$debug_level_result")\n\n  log_debug "Debug level Found $DEBUG_LEVEL_ID"\n\n  if [[ -z $DEBUG_LEVEL_ID || $DEBUG_LEVEL_ID == "null" ]]; then\n    log_simple "Debug Level doesn\'t exist"\n    DEBUG_LEVEL_ID=$(sf data record create -o "$IN_ORG_ALIAS" -s DebugLevel -t -v "ApexCode=FINEST ApexProfiling=INFO Callout=INFO Database=INFO System=INFO Validation=INFO Visualforce=INFO Workflow=INFO MasterLabel=\'$DEBUG_LEVEL_NAME\' DeveloperName=\'$DEBUG_LEVEL_NAME\'" | jq -r \'.result.id\')\n    log_simple "Successfully created Debug Level with ID: $DEBUG_LEVEL_ID"\n  else\n    log_simple "Debug Level exists"\n    sf data record update -o "$IN_ORG_ALIAS" -i "$DEBUG_LEVEL_ID" -s DebugLevel -t -v "ApexCode=FINEST ApexProfiling=INFO Callout=INFO Database=INFO System=INFO Validation=INFO Visualforce=INFO Workflow=INFO"\n    log_simple "Successfully updated Debug Level record: $DEBUG_LEVEL_ID."\n  fi\n}\n\ncheck_and_handle_trace_flag() {\n  local trace_flag_query="SELECT Id, DebugLevelId FROM TraceFlag WHERE TracedEntity.Name LIKE \'%$TRACING_ENTITY_NAME%\'"\n  local trace_flag_result=$(sf data query -o "$IN_ORG_ALIAS" -q "$trace_flag_query" -t -r json)\n  local traced_entity_ids=$(jq -r \'.result.records[].Id\' <<< "$trace_flag_result")\n  local traced_entity_debug_level_id=$(jq -r \'.result.records[0].DebugLevelId\' <<< "$trace_flag_result")\n\n  local start_date=$(date -u \'+%Y-%m-%dT%H:%M:%S\')\n  local expiration_date=$(date -u -v +12H \'+%Y-%m-%dT%H:%M:%S\')\n\n  for traced_entity_id in $traced_entity_ids\n  do\n    if [[ -n $traced_entity_id && $traced_entity_id != "null" ]]; then\n      sf data record delete -o "$IN_ORG_ALIAS" -t -s TraceFlag -i "$traced_entity_id"\n      log_simple "Deleted existing TraceFlag record with ID: $traced_entity_id"\n    fi\n  done\n\n  local user_query_result=$(sf data query -o "$IN_ORG_ALIAS" -t --json -q "SELECT Id, Name FROM User WHERE Name LIKE \'%$TRACING_ENTITY_NAME%\' LIMIT 1")\n  local user_to_trace_id=$(jq -r \'.result.records[0].Id\' <<< "$user_query_result")\n\n  if [[ -z $user_to_trace_id || $user_to_trace_id == "null" ]]; then\n    log_simple "Error: User to trace not found."\n    exit 1\n  fi\n\n  log_debug "Found User to Trace, Id: $user_to_trace_id"\n  local create_trace_flag_result=$(sf data record create -o "$IN_ORG_ALIAS" -t -s TraceFlag -v "TracedEntityId=$user_to_trace_id LogType=USER_DEBUG DebugLevelId=$DEBUG_LEVEL_ID StartDate=$start_date ExpirationDate=$expiration_date" --json)\n  local create_trace_flag_success=$(jq -r \'.status\' <<< "$create_trace_flag_result")\n\n  if [[ $create_trace_flag_success == "0" ]]; then\n    log_simple "Creating record for TraceFlag... Success"\n  else\n    log_simple "Creating record for TraceFlag... Error"\n    log_simple "Error: $(jq -r \'.message\' <<< "$create_trace_flag_result")"\n    exit 1\n  fi\n}\n\ndelete_excessive_logs() {\n  local log_query="SELECT Id FROM ApexLog ORDER BY SystemModstamp DESC LIMIT 1000"\n  local log_result=$(sf data query -o "$IN_ORG_ALIAS" -q "$log_query" -t --json)\n  \n  if [[ -z $log_result || $log_result == "null" ]]; then\n    log_simple "No logs found to delete."\n    return\n  fi\n\n  local log_ids=$(jq -r \'.result.records[].Id\' <<< "$log_result")\n\n  # Create a CSV file with the log IDs\n  echo "Id" > log_ids.csv\n  for log_id in $log_ids\n  do\n    echo "$log_id" >> log_ids.csv\n  done\n\n  # Delete logs in bulk using the CSV file\n  sf data delete bulk -o "$IN_ORG_ALIAS" -s ApexLog -f log_ids.csv\n\n  # Remove the CSV file\n  rm log_ids.csv\n}\n\nIN_ORG_ALIAS=""\nTRACING_ENTITY_NAME=""\nDEBUG_MODE=false\nSTART_DATE=$(date \'+%Y-%m-%dT%H:%M:%S\')\nEXPIRATION_DATE=$(date -v +12H \'+%Y-%m-%dT%H:%M:%S\')\nDEBUG_LEVEL_NAME="Debugger_Custom"\n\nparse_params "$@"\nlog_debug "Debug Mode is enabled"\nlog_debug "Input Parameters:" "\\n" "Target org is: $IN_ORG_ALIAS" "\\n" "Tracing Entity Name is: $TRACING_ENTITY_NAME"\ncheck_and_handle_debug_level\ncheck_and_handle_trace_flag\n# delete_excessive_logs\n'})})]})}function c(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},67312:e=>{e.exports=JSON.parse('{"permalink":"/snippets/set-debug-logs-for-user","editUrl":"https://bitbucket.org/aquiva/aqlib/src/main/snippets/../snippets/set-debug-logs-for-user.md","source":"@site/../snippets/set-debug-logs-for-user.md","title":"Set the Debug Logs for a user","description":"Sets a debug log for 12 hours for a specific user","date":"2024-08-12T18:03:15.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Evgenii Azimzhanov","email":"eazimzhanov@aquivalabs.com","image_url":"https://ca.slack-edge.com/T0GJ0ACVB-U3Y5VKY68-755f09b400ae-512","url":"https://aquivalabs.slack.com/team/U3Y5VKY68","imageURL":"https://ca.slack-edge.com/T0GJ0ACVB-U3Y5VKY68-755f09b400ae-512","socials":{},"key":null,"page":null}],"frontMatter":{"authors":{"name":"Evgenii Azimzhanov","email":"eazimzhanov@aquivalabs.com","image_url":"https://ca.slack-edge.com/T0GJ0ACVB-U3Y5VKY68-755f09b400ae-512","url":"https://aquivalabs.slack.com/team/U3Y5VKY68","imageURL":"https://ca.slack-edge.com/T0GJ0ACVB-U3Y5VKY68-755f09b400ae-512"}},"unlisted":false,"lastUpdatedAt":1723485795000,"lastUpdatedBy":"Evgenii Azimzhanov","prevItem":{"title":"Delete all debug logs","permalink":"/snippets/delete-all-debug-logs"},"nextItem":{"title":"Reset User after sandbox refresh","permalink":"/snippets/reset-user-after-refresh"}}')}}]);
"use strict";(self.webpackChunkAqLib_documentation_website=self.webpackChunkAqLib_documentation_website||[]).push([[8907],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},33358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"front/state-management/README","title":"State Management Pattern","description":"State management LWC Pattern app. Brings data flow control and reactive programming approach to your apps.","source":"@site/../documentation/front/state-management/README.md","sourceDirName":"front/state-management","slug":"/front/state-management/","permalink":"/AqLib-Website/front/state-management/","draft":false,"unlisted":false,"editUrl":"https://bitbucket.org/aquiva/aqlib/src/main/documentation/../documentation/front/state-management/README.md","tags":[],"version":"current","lastUpdatedBy":"Artem Kniazev","lastUpdatedAt":1758822229000,"frontMatter":{"link_to_source":"AqLib/lwc/state-management"},"sidebar":"documentation","previous":{"title":"Setup Assistant","permalink":"/AqLib-Website/front/setup-assistant/"},"next":{"title":"Wire Service Sync","permalink":"/AqLib-Website/front/wire-service-sync/"}}');var r=t(74848),o=t(28453);const a={link_to_source:"AqLib/lwc/state-management"},i="State Management Pattern",c={},l=[{value:"Pattern",id:"pattern",level:2},{value:"Store Component",id:"store-component",level:3},{value:"App Component",id:"app-component",level:3},{value:"Usage",id:"usage",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"To Do App Example",id:"to-do-app-example",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Used In",id:"used-in",level:2},{value:"Learn more",id:"learn-more",level:2},{value:"Nanostores ecosystem",id:"nanostores-ecosystem",level:3},{value:"EffectorJS - alternative store library",id:"effectorjs---alternative-store-library",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"state-management-pattern",children:"State Management Pattern"})}),"\n",(0,r.jsxs)(n.p,{children:["State management LWC Pattern app. Brings data flow control and reactive programming approach to your apps.",(0,r.jsx)(n.br,{}),"\n","Separate business logic from view implementations."]}),"\n",(0,r.jsx)(n.p,{children:"This example targeting two topics:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How to bootstrap a single source of data and have direct access to it irregardless of how deep your component tree is"}),"\n",(0,r.jsx)(n.li,{children:"Shows how state management can be injected into the app. This repo uses nanostores library but it can be safely replaced with effectorJS, redux toolkit, MobX, or whatever js"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"pattern",children:"Pattern"}),"\n",(0,r.jsx)(n.h3,{id:"store-component",children:"Store Component"}),"\n",(0,r.jsx)(n.p,{children:"Singleton pattern utilized to communicate between the components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Store {\n    // Business logic that is public to the componenets\n    $counter = Nanostores.atom(0);\n    updateCounter = () => $counter.set($counter.get() + 1);\n\n    constructor(context) {\n        // Singleton pattern\n        // Make sure store initialized only once\n        if (Store.instance) {\n            return Store.instance\n        }\n        Store.instance = this;\n    }\n    \n    // Reset store when it is no longer needed\n    reset = () => {\n        $counter.set(0);\n    }\n}\n\nexport class MyStore extends LightningElement {\n    store;\n\n    async connectedCallback() {\n        // Make sure parent's connectedCallback is called\n        if (super.connectedCallback) {\n            super.connectedCallback();\n        }\n            \n        // Load required scripts then initialize store\n        // LWC will do fetch only once and then reuse cached scripts\n        await Promise.all([\n            loadScript(this, myStaticResource + '/lodash.min.js'),\n            loadScript(this, myStaticResource + '/nanostores.min.js')\n        ]);\n        this.store = new Store();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"app-component",children:"App Component"}),"\n",(0,r.jsxs)(n.p,{children:["Extend the store component and communicate with it via ",(0,r.jsx)(n.code,{children:"this.store"})," property.\nMake sure ",(0,r.jsx)(n.code,{children:"await super.connectedCallback()"})," is called and awaited.\nScripts will be loaded and store initialized only once as soon as first component is connected (lazy loading)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import {MyStore} from 'c/myStore';\n\nexport default class TodoCounter extends MyStore {\n\n    subscribers = [];\n\n    async connectedCallback() {\n        await super.connectedCallback();\n\n        this.subscribers.push(\n            this.store.$counter\n                .subscribe(data => console.log(data))\n        )\n        // => 0\n\n        this.store.updateCounter();\n        // => 1\n    }\n\n    disconnectedCallback() {\n        // unbind subscribers to prevent data leaks\n        this.subscribers.forEach((unbind) => unbind());\n        // data in the singleton store persists as long as the Lightning UI remains active in the browser until refresh. \n        // clean up when the app is disconnected e.g., when leaving the page.\n        this.store.reset();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Copy internals and match it with your folder structure"}),"\n",(0,r.jsxs)(n.li,{children:["Component ",(0,r.jsx)(n.code,{children:"AqLib/lwc/state-management/TodoApp/lwc/todoStore"})," follows the pattern to implement the Store.","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Copy the component, rename it and adjust for your app needs"}),"\n",(0,r.jsx)(n.li,{children:"If you have multiple apps you might need to create store component for every app"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Delete Sample App ",(0,r.jsx)(n.code,{children:"force-app/TodoApp"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,r.jsx)(n.p,{children:"Proposed folder structure has a nested structure. Feel free to use it (sfdx support > 7.149.1) or flatten based on your needs.\nIt is stored flat in salesforce anyway"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u2514\u2500\u2500 AqLib/lwc/state-management/\n    \u251c\u2500\u2500 main - Project shared artifacts\n    \u2502   \u251c\u2500\u2500 lwc\n    \u2502   \u2502   \u251c\u2500\u2500 mixins - mixins pattern to easily extend components \n    \u2502   \u2502   \u2514\u2500\u2500 constants - js constants and labels\n    \u2502   \u2514\u2500\u2500 staticresources\n    \u2502       \u2514\u2500\u2500 appDependencies\n    \u2502           \u251c\u2500\u2500 nanostores.min.js - store management lib\n    \u2502           \u2514\u2500\u2500 lodash.min.js - common usage js helpers \n    \u251c\u2500\u2500 TodoApp - App artifacts\n        \u2514\u2500\u2500 lwc\n            \u251c\u2500\u2500 todoStore - app store component, stores business logic\n            \u251c\u2500\u2500 todo - Todo app container. Can be placed on Layout\n            \u251c\u2500\u2500 todoCounter - Counter of todos. Can be placed on Layout\n            \u2514\u2500\u2500 todo* - app internal componenets\n"})}),"\n",(0,r.jsx)(n.h2,{id:"to-do-app-example",children:"To Do App Example"}),"\n",(0,r.jsxs)(n.p,{children:["Inside this repo there is an example To Do App that can be deployed to scratch org to play with\n",(0,r.jsx)(n.img,{alt:"To Do App Example",src:t(61010).A+"",width:"2826",height:"2260"})]}),"\n",(0,r.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["nanostores ( ",(0,r.jsx)(n.a,{href:"https://github.com/nanostores/nanostores",children:"github.com/nanostores/nanostores"})," )"]}),"\n",(0,r.jsxs)(n.li,{children:["_.lodash (",(0,r.jsx)(n.a,{href:"https://lodash.com/docs/4.17.21",children:"4.17.21"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"used-in",children:"Used In"}),"\n",(0,r.jsx)(n.p,{children:"You can refer to these Aquiva projects to see more complex real life implementations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Meta (migrated to Nanostores from effector)"}),"\n",(0,r.jsxs)(n.li,{children:["Matik (",(0,r.jsx)(n.a,{href:"https://bitbucket.org/aquiva/matik/src/develop/",children:"https://bitbucket.org/aquiva/matik/src/develop/"}),") (effector)"]}),"\n",(0,r.jsx)(n.li,{children:"Sage"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,r.jsx)(n.h3,{id:"nanostores-ecosystem",children:"Nanostores ecosystem"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/nanostores",children:"https://github.com/nanostores"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"effectorjs---alternative-store-library",children:"EffectorJS - alternative store library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2604\ufe0f effector ( ",(0,r.jsx)(n.a,{href:"https://effector.dev",children:"https://effector.dev"})," )"]}),"\n",(0,r.jsxs)(n.li,{children:["42-px/effector-forms (",(0,r.jsx)(n.a,{href:"https://github.com/42-px/effector-forms",children:"https://github.com/42-px/effector-forms"}),")"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://effector.dev/docs/api/effector/",children:"effector documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/results?search_query=effector+js&sp=CAM%253D",children:"Youtube lections"})}),"\n",(0,r.jsxs)(n.li,{children:["Worth reading for better store data architecture",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://redux.js.org/usage/structuring-reducers/normalizing-state-shape",children:"https://redux.js.org/usage/structuring-reducers/normalizing-state-shape"})]}),"\n",(0,r.jsxs)(n.li,{children:["Effector community","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://t.me/effector_ru",children:"https://t.me/effector_ru"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://t.me/effector_en",children:"https://t.me/effector_en"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Effector ecosystem awesome list ",(0,r.jsx)(n.a,{href:"https://github.com/effector/awesome",children:"https://github.com/effector/awesome"})]}),"\n",(0,r.jsxs)(n.li,{children:["Aquiva LWC Best Practicies (State management & Pub Sub pattern)",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://aquiva.atlassian.net/wiki/spaces/STAN/pages/3636690964/LWC+Lightning+Web+Components+Best+Practices#Architecture",children:"https://aquiva.atlassian.net/wiki/spaces/STAN/pages/3636690964/LWC+Lightning+Web+Components+Best+Practices#Architecture"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},61010:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/todo-app-example-31bd8f9341ef2e808946b0ec88f39b17.png"}}]);